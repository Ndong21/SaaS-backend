// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blocks.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlockSale = `-- name: CreateBlockSale :one
INSERT INTO "b_sales" (product_id, selling_price, quantity)
VALUES ($1, $2, $3)
RETURNING id, product_id, quantity, selling_price, created_at
`

type CreateBlockSaleParams struct {
	ProductID    string         `json:"product_id"`
	SellingPrice pgtype.Numeric `json:"selling_price"`
	Quantity     int32          `json:"quantity"`
}

func (q *Queries) CreateBlockSale(ctx context.Context, arg CreateBlockSaleParams) (BSale, error) {
	row := q.db.QueryRow(ctx, createBlockSale, arg.ProductID, arg.SellingPrice, arg.Quantity)
	var i BSale
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.SellingPrice,
		&i.CreatedAt,
	)
	return i, err
}

const createBlocksProduct = `-- name: CreateBlocksProduct :one
INSERT INTO "b_products" (product_name, description)
VALUES ($1,$2)
RETURNING id, product_name, description
`

type CreateBlocksProductParams struct {
	ProductName string `json:"product_name"`
	Description string `json:"description"`
}

func (q *Queries) CreateBlocksProduct(ctx context.Context, arg CreateBlocksProductParams) (BProduct, error) {
	row := q.db.QueryRow(ctx, createBlocksProduct, arg.ProductName, arg.Description)
	var i BProduct
	err := row.Scan(&i.ID, &i.ProductName, &i.Description)
	return i, err
}

const createMaterial = `-- name: CreateMaterial :one
INSERT INTO "materials" (material_name, unit, description)
VALUES ($1,$2,$3)
RETURNING id, material_name, unit, description
`

type CreateMaterialParams struct {
	MaterialName string  `json:"material_name"`
	Unit         string  `json:"unit"`
	Description  *string `json:"description"`
}

func (q *Queries) CreateMaterial(ctx context.Context, arg CreateMaterialParams) (Material, error) {
	row := q.db.QueryRow(ctx, createMaterial, arg.MaterialName, arg.Unit, arg.Description)
	var i Material
	err := row.Scan(
		&i.ID,
		&i.MaterialName,
		&i.Unit,
		&i.Description,
	)
	return i, err
}

const createMaterialPurchase = `-- name: CreateMaterialPurchase :one
INSERT INTO "b_purchases" (material_id, quantity, price)
VALUES ($1,$2,$3)
RETURNING id, material_id, quantity, price, created_at
`

type CreateMaterialPurchaseParams struct {
	MaterialID string         `json:"material_id"`
	Quantity   int32          `json:"quantity"`
	Price      pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateMaterialPurchase(ctx context.Context, arg CreateMaterialPurchaseParams) (BPurchase, error) {
	row := q.db.QueryRow(ctx, createMaterialPurchase, arg.MaterialID, arg.Quantity, arg.Price)
	var i BPurchase
	err := row.Scan(
		&i.ID,
		&i.MaterialID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSErT INTO "sessions" (session, description)
VALUES ($1, $2)
RETURNING id, session, description
`

type CreateSessionParams struct {
	Session     string `json:"session"`
	Description string `json:"description"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.Session, arg.Description)
	var i Session
	err := row.Scan(&i.ID, &i.Session, &i.Description)
	return i, err
}

const createSessionMaterials = `-- name: CreateSessionMaterials :one
INSERT INTO "session_materials" (session_id, team_id,material_id, date,quantity)
VALUES ($1,$2,$3,$4,$5)
RETURNING session_id, team_id, material_id, date, quantity
`

type CreateSessionMaterialsParams struct {
	SessionID  string      `json:"session_id"`
	TeamID     string      `json:"team_id"`
	MaterialID string      `json:"material_id"`
	Date       pgtype.Date `json:"date"`
	Quantity   int32       `json:"quantity"`
}

func (q *Queries) CreateSessionMaterials(ctx context.Context, arg CreateSessionMaterialsParams) (SessionMaterial, error) {
	row := q.db.QueryRow(ctx, createSessionMaterials,
		arg.SessionID,
		arg.TeamID,
		arg.MaterialID,
		arg.Date,
		arg.Quantity,
	)
	var i SessionMaterial
	err := row.Scan(
		&i.SessionID,
		&i.TeamID,
		&i.MaterialID,
		&i.Date,
		&i.Quantity,
	)
	return i, err
}

const createSessionProducts = `-- name: CreateSessionProducts :one
INSERT INTO "session_products" (session_id, team_id,product_id, date,quantity)
VALUES ($1,$2,$3,$4,$5)
RETURNING session_id, team_id, product_id, date, quantity
`

type CreateSessionProductsParams struct {
	SessionID string      `json:"session_id"`
	TeamID    string      `json:"team_id"`
	ProductID string      `json:"product_id"`
	Date      pgtype.Date `json:"date"`
	Quantity  int32       `json:"quantity"`
}

func (q *Queries) CreateSessionProducts(ctx context.Context, arg CreateSessionProductsParams) (SessionProduct, error) {
	row := q.db.QueryRow(ctx, createSessionProducts,
		arg.SessionID,
		arg.TeamID,
		arg.ProductID,
		arg.Date,
		arg.Quantity,
	)
	var i SessionProduct
	err := row.Scan(
		&i.SessionID,
		&i.TeamID,
		&i.ProductID,
		&i.Date,
		&i.Quantity,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSErT INTO "teams" (team_name, phone_number, email)
VALUES ($1, $2, $3)
RETURNING id, team_name, phone_number, email
`

type CreateTeamParams struct {
	TeamName    string  `json:"team_name"`
	PhoneNumber *string `json:"phone_number"`
	Email       *string `json:"email"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam, arg.TeamName, arg.PhoneNumber, arg.Email)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.TeamName,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}
